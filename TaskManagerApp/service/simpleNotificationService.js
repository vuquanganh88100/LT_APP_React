import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import Constants from 'expo-constants';
import AsyncStorage from '@react-native-async-storage/async-storage';

//  C·∫•u h√¨nh notification behavior
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

class SimpleNotificationService {
  constructor() {
    this.expoPushToken = null;
    this.isInitialized = false;
  }

  /**
   * üöÄ Kh·ªüi t·∫°o notification service
   */
  async initialize() {
    try {
      console.log('üöÄ Initializing Simple Notification Service...');

      // Ki·ªÉm tra device
      if (!Device.isDevice) {
        console.log('‚ö†Ô∏è Must use physical device for Push Notifications');
        return false;
      }

      // Xin quy·ªÅn notification
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }
      
      if (finalStatus !== 'granted') {
        console.log('‚ùå Failed to get push token for push notification!');
        return false;
      }

      // L·∫•y push token
      try {
        const projectId = Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
        if (!projectId) {
          console.log('‚ö†Ô∏è Project ID not found, using basic notifications');
        }
        
        this.expoPushToken = (await Notifications.getExpoPushTokenAsync({
          projectId,
        })).data;
        
        console.log('‚úÖ Expo Push Token:', this.expoPushToken);
      } catch (error) {
        console.log('‚ö†Ô∏è Could not get push token, using local notifications only:', error.message);
      }

      this.isInitialized = true;
      console.log('‚úÖ Simple Notification Service initialized successfully');
      
      // Auto-debug notifications on startup
      setTimeout(() => {
        this.debugAllNotificationsOnStartup();
      }, 2000);
      
      return true;

    } catch (error) {
      console.error('‚ùå Error initializing notification service:', error);
      return false;
    }
  }

  /**
   * üîî G·ª≠i notification ngay l·∫≠p t·ª©c (Local)
   */
  async sendImmediateNotification(title, body, data = {}) {
    try {
      if (!this.isInitialized) {
        console.log('‚ö†Ô∏è Notification service not initialized');
        return false;
      }

      const notificationId = await Notifications.scheduleNotificationAsync({
        content: {
          title: title,
          body: body,
          data: data,
          sound: 'default',
        },
        trigger: null, // G·ª≠i ngay l·∫≠p t·ª©c
      });

      console.log('‚úÖ Immediate notification sent:', notificationId);
      return true;

    } catch (error) {
      console.error('‚ùå Error sending immediate notification:', error);
      return false;
    }
  }

  /**
   * ‚è∞ L√™n l·ªãch notification cho task
   */
  async scheduleTaskNotification(task) {
    try {
      if (!this.isInitialized) {
        console.log('‚ö†Ô∏è Notification service not initialized');
        return null;
      }

      const taskDate = new Date(task.startTime);
      const now = new Date();
      
      // üîç Debug th√¥ng tin th·ªùi gian
      console.log('üìÖ Task scheduling debug:', {
        taskTitle: task.title,
        taskStartTime: task.startTime,
        taskDate: taskDate.toLocaleString('vi-VN'),
        currentTime: now.toLocaleString('vi-VN'),
        taskDateTimestamp: taskDate.getTime(),
        nowTimestamp: now.getTime(),
        isTaskInFuture: taskDate > now
      });
      
      // CH·ªà th√¥ng b√°o cho tasks trong kho·∫£ng 15 ph√∫t t·ªõi
      const fifteenMinutesFromNow = new Date(now.getTime() + 15 * 60 * 1000);
      const oneMinuteBuffer = 60 * 1000; // 1 ph√∫t buffer
      
      // Task ƒë√£ qua
      if (taskDate.getTime() <= now.getTime()) {
        console.log('‚è∞ Task ƒë√£ qua, kh√¥ng th√¥ng b√°o');
        return null;
      }
      
      // Task qu√° xa trong t∆∞∆°ng lai (h∆°n 15 ph√∫t) - KH√îNG th√¥ng b√°o
      if (taskDate.getTime() > fifteenMinutesFromNow.getTime()) {
        console.log('‚è∞ Task qu√° xa (h∆°n 15 ph√∫t), KH√îNG th√¥ng b√°o:', {
          taskTime: taskDate.toLocaleString('vi-VN'),
          fifteenMinutesFromNow: fifteenMinutesFromNow.toLocaleString('vi-VN'),
          minutesUntilTask: Math.round((taskDate.getTime() - now.getTime()) / (60 * 1000))
        });
        return null;
      }

      // Task trong kho·∫£ng 15 ph√∫t t·ªõi - G·ª¨I TH√îNG B√ÅO NGAY
      console.log('üîî Task trong 15 ph√∫t t·ªõi - G·ª¨I TH√îNG B√ÅO NGAY:', {
        taskTime: taskDate.toLocaleString('vi-VN'),
        minutesUntilTask: Math.round((taskDate.getTime() - now.getTime()) / (60 * 1000))
      });

      // G·ª≠i th√¥ng b√°o ngay l·∫≠p t·ª©c
      return await this.sendImmediateNotification(
        'üîî Task s·∫Øp b·∫Øt ƒë·∫ßu!',
        `"${task.title}" s·∫Ω b·∫Øt ƒë·∫ßu trong ${Math.round((taskDate.getTime() - now.getTime()) / (60 * 1000))} ph√∫t`,
        {
          taskId: task.id,
          taskTitle: task.title,
          type: 'task_immediate_reminder'
        }
      );

      const notificationId = await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üìã Nh·∫Øc nh·ªü c√¥ng vi·ªác',
          body: `"${task.title}" s·∫Ω b·∫Øt ƒë·∫ßu trong 15 ph√∫t`,
          data: {
            taskId: task.id,
            taskTitle: task.title,
            type: 'task_reminder'
          },
          sound: 'default',
        },
        trigger: {
          date: notificationTime,
        },
      });

      console.log('‚úÖ Task notification scheduled:', {
        notificationId,
        taskTitle: task.title,
        notificationTime: notificationTime.toLocaleString('vi-VN')
      });

      // L∆∞u th√¥ng tin notification
      await this.saveScheduledNotification({
        id: notificationId,
        taskId: task.id,
        taskTitle: task.title,
        scheduledTime: notificationTime.toISOString(),
        type: 'task_reminder'
      });

      return notificationId;

    } catch (error) {
      console.error('‚ùå Error scheduling task notification:', error);
      return null;
    }
  }

  /**
   * ‚è∞ L√™n l·ªãch cho nhi·ªÅu task (ch·ªâ trong 15 ph√∫t t·ªõi)
   */
  async scheduleMultipleTaskNotifications(tasks) {
    const results = [];
    const now = new Date();
    
    console.log(`üîÑ B·∫Øt ƒë·∫ßu l√™n l·ªãch cho ${tasks.length} tasks...`);
    console.log(`üìÖ Th·ªùi gian hi·ªán t·∫°i: ${now.toLocaleString('vi-VN')}`);
    
    // Filter CH·ªà l·∫•y tasks trong kho·∫£ng 15 ph√∫t t·ªõi
    const fifteenMinutesFromNow = new Date(now.getTime() + 15 * 60 * 1000);
    
    const relevantTasks = tasks.filter(task => {
      const taskDate = new Date(task.startTime);
      const minutesUntilTask = Math.round((taskDate.getTime() - now.getTime()) / (60 * 1000));
      
      // Task ƒë√£ qua
      if (taskDate.getTime() <= now.getTime()) {
        console.log(`‚è≠Ô∏è B·ªè qua task "${task.title}" - ƒë√£ qua (${taskDate.toLocaleString('vi-VN')})`);
        return false;
      }
      
      // Task qu√° xa trong t∆∞∆°ng lai (h∆°n 15 ph√∫t) - KH√îNG th√¥ng b√°o
      if (taskDate.getTime() > fifteenMinutesFromNow.getTime()) {
        console.log(`‚è≠Ô∏è B·ªè qua task "${task.title}" - qu√° xa (${minutesUntilTask} ph√∫t) (${taskDate.toLocaleString('vi-VN')})`);
        return false;
      }
      
      // Task trong 15 ph√∫t t·ªõi - S·∫º th√¥ng b√°o
      console.log(`‚úÖ Task "${task.title}" - trong 15 ph√∫t t·ªõi (${minutesUntilTask} ph√∫t)`);
      return true;
    });
    
    console.log(`üìã C√≥ ${relevantTasks.length}/${tasks.length} tasks trong kho·∫£ng 15 ph√∫t t·ªõi`);
    console.log(`‚è∞ Kho·∫£ng th·ªùi gian: ${now.toLocaleString('vi-VN')} ‚Üí ${fifteenMinutesFromNow.toLocaleString('vi-VN')}`);
    
    for (const task of relevantTasks) {
      const notificationId = await this.scheduleTaskNotification(task);
      if (notificationId) {
        results.push({
          taskId: task.id,
          taskTitle: task.title,
          notificationId
        });
      }
    }
    
    console.log(`‚úÖ ƒê√£ G·ª¨I ${results.length}/${relevantTasks.length} th√¥ng b√°o NGAY cho tasks trong 15 ph√∫t t·ªõi`);
    
    // Debug: Ki·ªÉm tra t·∫•t c·∫£ notifications hi·ªán t·∫°i
    const allScheduled = await Notifications.getAllScheduledNotificationsAsync();
    const allDelivered = await Notifications.getPresentedNotificationsAsync();
    console.log(`üîç DEBUG: Hi·ªán c√≥ ${allScheduled.length} scheduled + ${allDelivered.length} delivered notifications`);
    
    if (allScheduled.length > 0) {
      console.log('‚è∞ SCHEDULED NOTIFICATIONS:');
      allScheduled.forEach((notif, index) => {
        const triggerDate = notif.trigger?.date ? new Date(notif.trigger.date) : null;
        console.log(`   ${index + 1}. "${notif.content?.title}" - ${triggerDate ? triggerDate.toLocaleString('vi-VN') : 'No date'}`);
      });
    }
    
    if (allDelivered.length > 0) {
      console.log('üì¨ DELIVERED NOTIFICATIONS:');
      allDelivered.forEach((notif, index) => {
        console.log(`   ${index + 1}. "${notif.request.content?.title}" - ${notif.date ? new Date(notif.date).toLocaleString('vi-VN') : 'No date'}`);
      });
    }
    
    return results;
  }



  /**
   * üìã L·∫•y danh s√°ch notification ƒë√£ l√™n l·ªãch
   */
  async getScheduledNotifications() {
    try {
      const notifications = await Notifications.getAllScheduledNotificationsAsync();
      console.log(`üìã Found ${notifications.length} scheduled notifications`);
      return notifications;
    } catch (error) {
      console.error('‚ùå Error getting scheduled notifications:', error);
      return [];
    }
  }

  /**
   * üóëÔ∏è H·ªßy notification theo ID
   */
  async cancelNotification(notificationId) {
    try {
      await Notifications.cancelScheduledNotificationAsync(notificationId);
      console.log('üóëÔ∏è Notification canceled:', notificationId);
      return true;
    } catch (error) {
      console.error('‚ùå Error canceling notification:', error);
      return false;
    }
  }

  /**
   * üóëÔ∏è H·ªßy t·∫•t c·∫£ notification v√† clear storage
   */
  async cancelAllNotifications() {
    try {
      // Debug tr∆∞·ªõc khi x√≥a
      const beforeNotifications = await Notifications.getAllScheduledNotificationsAsync();
      console.log(`üîç Tr∆∞·ªõc khi x√≥a: ${beforeNotifications.length} notifications`);
      
      beforeNotifications.forEach((notif, index) => {
        const triggerDate = notif.trigger?.date ? new Date(notif.trigger.date) : null;
        console.log(`üìã Notification ${index + 1}:`, {
          id: notif.identifier,
          title: notif.content?.title,
          triggerDate: triggerDate ? triggerDate.toLocaleString('vi-VN') : 'No date'
        });
      });

      // X√≥a t·∫•t c·∫£
      await Notifications.cancelAllScheduledNotificationsAsync();
      await AsyncStorage.removeItem('scheduledNotifications');
      
      // Verify ƒë√£ x√≥a h·∫øt
      const afterNotifications = await Notifications.getAllScheduledNotificationsAsync();
      console.log(`‚úÖ Sau khi x√≥a: ${afterNotifications.length} notifications`);
      
      return true;
    } catch (error) {
      console.error('‚ùå Error canceling all notifications:', error);
      return false;
    }
  }

  /**
   * üîç Debug scheduled notifications
   */
  async debugScheduledNotifications() {
    try {
      const notifications = await Notifications.getAllScheduledNotificationsAsync();
      const now = new Date();
      
      console.log(`üîç Debug: Found ${notifications.length} scheduled notifications`);
      console.log(`üìÖ Current time: ${now.toLocaleString('vi-VN')}`);
      
      notifications.forEach((notification, index) => {
        const triggerDate = notification.trigger?.date ? new Date(notification.trigger.date) : null;
        console.log(`üìã Notification ${index + 1}:`, {
          id: notification.identifier,
          title: notification.content?.title,
          body: notification.content?.body,
          triggerDate: triggerDate ? triggerDate.toLocaleString('vi-VN') : 'No trigger date',
          isInPast: triggerDate ? triggerDate < now : false,
          data: notification.content?.data
        });
      });
      
      return notifications;
    } catch (error) {
      console.error('‚ùå Error debugging notifications:', error);
      return [];
    }
  }

  /**
   * üßπ Clean up past notifications
   */
  async cleanupPastNotifications() {
    try {
      const notifications = await Notifications.getAllScheduledNotificationsAsync();
      const now = new Date();
      let cleanedCount = 0;
      
      for (const notification of notifications) {
        const triggerDate = notification.trigger?.date ? new Date(notification.trigger.date) : null;
        
        if (triggerDate && triggerDate < now) {
          await Notifications.cancelScheduledNotificationAsync(notification.identifier);
          cleanedCount++;
          console.log(`üßπ Cleaned past notification: ${notification.content?.title}`);
        }
      }
      
      console.log(`üßπ Cleaned ${cleanedCount} past notifications`);
      return cleanedCount;
    } catch (error) {
      console.error('‚ùå Error cleaning past notifications:', error);
      return 0;
    }
  }

  /**
   * üíæ L∆∞u th√¥ng tin notification ƒë√£ l√™n l·ªãch
   */
  async saveScheduledNotification(notificationInfo) {
    try {
      const saved = await AsyncStorage.getItem('scheduledNotifications');
      const notifications = saved ? JSON.parse(saved) : [];
      notifications.push(notificationInfo);
      await AsyncStorage.setItem('scheduledNotifications', JSON.stringify(notifications));
    } catch (error) {
      console.error('‚ùå Error saving notification info:', error);
    }
  }

  /**
   * üìñ L·∫•y th√¥ng tin notification ƒë√£ l∆∞u
   */
  async getSavedNotifications() {
    try {
      const saved = await AsyncStorage.getItem('scheduledNotifications');
      return saved ? JSON.parse(saved) : [];
    } catch (error) {
      console.error('‚ùå Error getting saved notifications:', error);
      return [];
    }
  }

  /**
   * üö´ Force clear t·∫•t c·∫£ notifications v√† disable auto-scheduling
   */
  async forceClearAndDisable() {
    try {
      console.log('üö´ FORCE CLEAR: B·∫Øt ƒë·∫ßu x√≥a t·∫•t c·∫£ notifications...');
      
      // 1. Cancel t·∫•t c·∫£ notifications
      await Notifications.cancelAllScheduledNotificationsAsync();
      
      // 2. Clear AsyncStorage
      await AsyncStorage.removeItem('scheduledNotifications');
      
      // 3. Verify clean
      const remaining = await Notifications.getAllScheduledNotificationsAsync();
      console.log(`üßπ FORCE CLEAR: C√≤n l·∫°i ${remaining.length} notifications`);
      
      if (remaining.length > 0) {
        console.log('‚ö†Ô∏è FORCE CLEAR: V·∫´n c√≤n notifications, x√≥a t·ª´ng c√°i...');
        for (const notif of remaining) {
          await Notifications.cancelScheduledNotificationAsync(notif.identifier);
          console.log(`üóëÔ∏è ƒê√£ x√≥a: ${notif.identifier}`);
        }
      }
      
      // 4. Final check
      const finalCheck = await Notifications.getAllScheduledNotificationsAsync();
      console.log(`‚úÖ FORCE CLEAR: Ho√†n th√†nh! C√≤n l·∫°i ${finalCheck.length} notifications`);
      
      return finalCheck.length === 0;
    } catch (error) {
      console.error('‚ùå FORCE CLEAR Error:', error);
      return false;
    }
  }



  /**
   * üîç Debug notifications on startup
   */
  async debugAllNotificationsOnStartup() {
    try {
      console.log('üîç AUTO-DEBUG: Checking all notifications on startup...');
      
      const scheduled = await Notifications.getAllScheduledNotificationsAsync();
      const delivered = await Notifications.getPresentedNotificationsAsync();
      
      console.log(`üìä STARTUP DEBUG: ${scheduled.length} scheduled + ${delivered.length} delivered notifications`);
      
      if (scheduled.length > 0) {
        console.log('‚è∞ SCHEDULED NOTIFICATIONS ON STARTUP:');
        scheduled.forEach((notif, index) => {
          const triggerDate = notif.trigger?.date ? new Date(notif.trigger.date) : null;
          const now = new Date();
          const isPast = triggerDate && triggerDate < now;
          console.log(`   ${index + 1}. "${notif.content?.title}" - ${triggerDate ? triggerDate.toLocaleString('vi-VN') : 'No date'} ${isPast ? '(PAST)' : ''}`);
        });
      }
      
      if (delivered.length > 0) {
        console.log('üì¨ DELIVERED NOTIFICATIONS ON STARTUP:');
        delivered.forEach((notif, index) => {
          console.log(`   ${index + 1}. "${notif.request.content?.title}" - ${notif.date ? new Date(notif.date).toLocaleString('vi-VN') : 'No date'}`);
        });
      }
      
      // Auto-clean past notifications
      if (scheduled.length > 0) {
        console.log('üßπ AUTO-CLEANING past scheduled notifications...');
        const cleaned = await this.cleanupPastNotifications();
        console.log(`üßπ AUTO-CLEANED: ${cleaned} past notifications`);
      }
      
    } catch (error) {
      console.error('‚ùå Error in startup debug:', error);
    }
  }

  /**
   * üßπ Cleanup
   */
  cleanup() {
    console.log('üßπ Simple Notification Service cleaned up');
  }
}

// Export singleton instance
export const simpleNotificationService = new SimpleNotificationService();